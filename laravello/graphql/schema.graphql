"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
        "Search by primary key."
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

        "Search by email address."
        email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find @guard

    "List multiple users."
    users(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    board(id: ID! @eq): Board @find @guard

    me: User @auth

    userBoards(owner_id: ID! @where): [Board!] @all  @can(ability: "viewOwnedBoards", model: "User", find: "owner_id")
}

type Mutation {
    cardAdd(input: CardAddInput! @spread): Card @create @guard @inject(context: "user.id", name: "owner_id") @can(ability: "createCard", model: "CardList", find: "list_id")
    cardDelete(id: ID!): Card @delete @guard @can(ability: "delete", find:"id")
    cardUpdate(input: CardUpdateInput! @spread): Card @update @guard @can(ability: "update", find:"id")

    boardAdd(title: String! @rules(apply: ["required"]) color: String!): Board! @create @guard

    listAdd(title: String! @rules(apply: ["required"]) board_id: ID!  @rules(apply: ["required", "exists:boards,id"])): CardList! @create @guard

    "Log in to a new session and get the user."
    login(email: String!, password: String!): User!

    "Log out from the current session, showing the user one last time."
    logout: User @guard

    register(
        email: String! @rules(apply: ["required", "email", "unique:users"])
        name: String!, @rules(apply: ["required", "min:2"])
        password: String! @rules(apply: ["required", "min:8"]) @hash
    ): User! @create @event(dispatch: "Illuminate\\Auth\\Events\\Registered")
}

input CardAddInput {
    title: String!
    order: Int!
    list_id: ID!
}

input CardUpdateInput {
    id: ID!
    title: String!
    order: Int!
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!

    boards: [Board!]! @hasMany
    cards: [Card!]! @hasMany
}

type Board {
    id: ID!
    title: String!
    color: String!
    created_at: DateTime
    updated_at: DateTime
    owner: User! @belongsTo
    lists: [CardList!]! @hasMany
}

type CardList {
    id: ID!
    title: String!
    created_at: DateTime
    updated_at: DateTime
    cards: [Card!]! @hasMany
    board: Board! @belongsTo
}

type Card {
    id: ID!
    title: String!
    order: Int!
    created_at: DateTime
    updated_at: DateTime
    owner: User! @belongsTo
    list: CardList! @belongsTo
}


